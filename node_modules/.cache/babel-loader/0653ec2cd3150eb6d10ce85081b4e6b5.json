{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documentos/projects-turma23/sd-023-b-project-trybetunes/src/components/MusicCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MusicCard extends Component {\n  constructor() {\n    super();\n\n    this.saveSong = async music => {\n      await addSong(music);\n      const favorites = await getFavoriteSongs();\n      this.setState(() => ({\n        loading: false,\n        fav: favorites\n      }));\n    };\n\n    this.deletFavoriteSong = async music => {\n      await removeSong(music);\n      const favorite = await getFavoriteSongs();\n      this.setState({\n        loading: false,\n        fav: favorite\n      });\n    };\n\n    this.manageCheck = async (music, _ref) => {\n      let {\n        target\n      } = _ref;\n      this.setState({\n        loading: true\n      });\n\n      if (target.checked) {\n        await this.saveSong(music);\n      } else {\n        await this.deletFavoriteSong(music);\n      }\n    };\n\n    this.mapFunction = array => array.map((music, index) => /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Nome da m\\xFAsica:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: music.trackName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        \"data-testid\": \"audio-component\",\n        src: music.previewUrl,\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"track\", {\n          kind: \"captions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: music.trackId,\n        \"data-testid\": `checkbox-music-${music.trackId}`,\n        children: [\"Favorita\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: music.trackId,\n          onChange: e => this.manageCheck(music, e),\n          checked: fav.some(m => m.trackId === music.trackId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this));\n\n    this.showMusics = () => {\n      const {\n        musics\n      } = this.props;\n      const {\n        fav\n      } = this.state;\n      const filteredTrack = musics.some(song => song.trackId);\n\n      if (filteredTrack) {\n        const filteredSongs = musics.filter(song => song.trackId);\n        return this.mapFunction(filteredSongs);\n      } else {\n        return this.mapFunction(fav);\n      }\n    };\n\n    this.state = {\n      loading: false,\n      fav: []\n    };\n  }\n\n  async componentDidMount() {\n    const favSongs = await getFavoriteSongs();\n    this.setState({\n      fav: favSongs\n    });\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this) : this.showMusics();\n  }\n\n}\nMusicCard.propTypes = {\n  musics: PropTypes.shape({\n    map: PropTypes.string,\n    filter: PropTypes.string,\n    some: PropTypes.string\n  }).isRequired\n};","map":{"version":3,"names":["React","Component","PropTypes","addSong","getFavoriteSongs","removeSong","Loading","MusicCard","constructor","saveSong","music","favorites","setState","loading","fav","deletFavoriteSong","favorite","manageCheck","target","checked","mapFunction","array","map","index","trackName","previewUrl","trackId","e","some","m","showMusics","musics","props","state","filteredTrack","song","filteredSongs","filter","componentDidMount","favSongs","render","propTypes","shape","string","isRequired"],"sources":["/home/fernando/Documentos/projects-turma23/sd-023-b-project-trybetunes/src/components/MusicCard.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from './Loading';\n\nexport default class MusicCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      fav: [],\n    };\n  }\n\n  async componentDidMount() {\n    const favSongs = await getFavoriteSongs();\n    this.setState({\n      fav: favSongs,\n    });\n  }\n\n  saveSong = async (music) => {\n    await addSong(music);\n    const favorites = await getFavoriteSongs();\n    this.setState(() => ({\n      loading: false,\n      fav: favorites,\n    }));\n  }\n\n  deletFavoriteSong = async (music) => {\n    await removeSong(music);\n    const favorite = await getFavoriteSongs();\n    this.setState({\n      loading: false,\n      fav: favorite,\n\n    });\n  }\n\n  manageCheck = async (music, { target }) => {\n    this.setState({\n      loading: true,\n    });\n    if (target.checked) {\n      await this.saveSong(music);\n    } else {\n      await this.deletFavoriteSong(music);\n    }\n  };\n\n  mapFunction = (array) => array.map((music, index) => (\n    (\n      <section key={ index }>\n        <span>Nome da m√∫sica:</span>\n        <p>{ music.trackName }</p>\n        <audio data-testid=\"audio-component\" src={ music.previewUrl } controls>\n          <track kind=\"captions\" />\n          <code>audio</code>\n        </audio>\n        <label\n          htmlFor={ music.trackId }\n          data-testid={ `checkbox-music-${music.trackId}` }\n        >\n          Favorita\n          <input\n            type=\"checkbox\"\n            id={ music.trackId }\n            onChange={ (e) => this.manageCheck(music, e) }\n            checked={ fav.some((m) => m.trackId === music.trackId) }\n          />\n        </label>\n        <hr />\n      </section>\n    )))\n\n  showMusics = () => {\n    const { musics } = this.props;\n    const { fav } = this.state;\n    const filteredTrack = musics.some((song) => song.trackId);\n    if (filteredTrack) {\n      const filteredSongs = musics.filter((song) => song.trackId);\n      return this.mapFunction(filteredSongs);\n    } else {\n      return this.mapFunction(fav);\n    }\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      loading ? <Loading /> : this.showMusics()\n    );\n  }\n}\n\nMusicCard.propTypes = {\n  musics: PropTypes.shape({\n    map: PropTypes.string,\n    filter: PropTypes.string,\n    some: PropTypes.string,\n  }).isRequired,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}