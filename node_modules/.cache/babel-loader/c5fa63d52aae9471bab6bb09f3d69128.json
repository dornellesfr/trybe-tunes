{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documentos/projects-turma23/sd-023-b-project-trybetunes/src/components/MusicCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MusicCard extends Component {\n  constructor() {\n    super();\n\n    this.saveSong = async music => {\n      await addSong(music);\n      const favorites = await getFavoriteSongs();\n      this.setState(() => ({\n        loading: false,\n        fav: favorites\n      }));\n    };\n\n    this.deletFavoriteSong = async music => {\n      await removeSong(music);\n      const favorite = await getFavoriteSongs();\n      this.setState({\n        loading: false,\n        fav: favorite\n      });\n    };\n\n    this.manageCheck = async (music, _ref) => {\n      let {\n        target\n      } = _ref;\n      this.setState({\n        loading: true\n      });\n\n      if (target.checked) {\n        await this.saveSong(music);\n      } else {\n        await this.deletFavoriteSong(music);\n      }\n    };\n\n    this.showMusics = () => {\n      const {\n        musics\n      } = this.props;\n      const filteredTrack = musics.some(song => song.trackId);\n\n      if (filteredTrack) {\n        const filteredSongs = musics.filter(song => song.trackId);\n        const tracks = filteredSongs.map((music, index) => /*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Nome da m\\xFAsica:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: music.trackName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            \"data-testid\": \"audio-component\",\n            src: music.previewUrl,\n            controls: true,\n            children: [/*#__PURE__*/_jsxDEV(\"track\", {\n              kind: \"captions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"audio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: music.trackId,\n            \"data-testid\": `checkbox-music-${music.trackId}`,\n            children: [\"Favorita\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: music.trackId,\n              onChange: e => this.manageCheck(music, e),\n              checked: fav.some(m => m.trackId === music.trackId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this));\n      } else {\n        const {\n          loading,\n          fav\n        } = this.state;\n      }\n    };\n\n    this.state = {\n      loading: false,\n      fav: []\n    };\n  }\n\n  async componentDidMount() {\n    const favSongs = await getFavoriteSongs();\n    this.setState({\n      fav: favSongs\n    });\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this) : tracks;\n  }\n\n}\nMusicCard.propTypes = {\n  musics: PropTypes.shape({\n    map: PropTypes.string,\n    filter: PropTypes.string\n  })\n};","map":{"version":3,"names":["React","Component","PropTypes","addSong","getFavoriteSongs","removeSong","Loading","MusicCard","constructor","saveSong","music","favorites","setState","loading","fav","deletFavoriteSong","favorite","manageCheck","target","checked","showMusics","musics","props","filteredTrack","some","song","trackId","filteredSongs","filter","tracks","map","index","trackName","previewUrl","e","m","state","componentDidMount","favSongs","render","propTypes","shape","string"],"sources":["/home/fernando/Documentos/projects-turma23/sd-023-b-project-trybetunes/src/components/MusicCard.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from './Loading';\n\nexport default class MusicCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      fav: [],\n    };\n  }\n\n  async componentDidMount() {\n    const favSongs = await getFavoriteSongs();\n    this.setState({\n      fav: favSongs,\n    });\n  }\n\n  saveSong = async (music) => {\n    await addSong(music);\n    const favorites = await getFavoriteSongs();\n    this.setState(() => ({\n      loading: false,\n      fav: favorites,\n    }));\n  }\n\n  deletFavoriteSong = async (music) => {\n    await removeSong(music);\n    const favorite = await getFavoriteSongs();\n    this.setState({\n      loading: false,\n      fav: favorite,\n\n    });\n  }\n\n  manageCheck = async (music, { target }) => {\n    this.setState({\n      loading: true,\n    });\n    if (target.checked) {\n      await this.saveSong(music);\n    } else {\n      await this.deletFavoriteSong(music);\n    }\n  };\n\n  showMusics = () => {\n    const { musics } = this.props;\n    const filteredTrack = musics.some((song) => song.trackId);\n    if (filteredTrack) {\n      const filteredSongs = musics.filter((song) => song.trackId);\n      const tracks = filteredSongs.map((music, index) => (\n        (\n          <section key={ index }>\n            <span>Nome da m√∫sica:</span>\n            <p>{ music.trackName }</p>\n            <audio data-testid=\"audio-component\" src={ music.previewUrl } controls>\n              <track kind=\"captions\" />\n              <code>audio</code>\n            </audio>\n            <label\n              htmlFor={ music.trackId }\n              data-testid={ `checkbox-music-${music.trackId}` }\n            >\n              Favorita\n              <input\n                type=\"checkbox\"\n                id={ music.trackId }\n                onChange={ (e) => this.manageCheck(music, e) }\n                checked={ fav.some((m) => m.trackId === music.trackId) }\n              />\n            </label>\n            <hr />\n          </section>\n        )));\n    } else {\n      const { loading, fav } = this.state;\n    }\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      loading ? <Loading /> : tracks\n    );\n  }\n}\n\nMusicCard.propTypes = {\n  musics: PropTypes.shape({\n    map: PropTypes.string,\n    filter: PropTypes.string,\n  }),\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}